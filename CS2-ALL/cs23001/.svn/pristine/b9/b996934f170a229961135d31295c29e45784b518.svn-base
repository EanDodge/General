// implementation file
// Ean Dodge
// BIGINT
// cs23001

#include <iostream>
#include "bigint.hpp"

// char constructor
bigint::bigint()
{
    for (int i = 0; i < CAPACITY; ++i)
        bigintArray[i] = 0;
}

bigint::bigint(const char character[]) : bigint()
{

    int i = 0;
    while (character[i] != '\0')
        ++i;

    int size = i, number;
    for (int j = 0; j < size; ++j)
    {
        number = int(character[i - 1]) - int('0');
        bigintArray[j] = number;
        --i;
    }
}

// int constrctor
bigint::bigint(int input) : bigint()
{
    int digit, i = 0;
    if (input == 0)
        bigintArray[0] = 0;
    else
    {
        while (input != 0)
        {
            digit = input % 10; // make digit the 1's place;
            bigintArray[i] = digit;
            input = input / 10;
            ++i;
        }
    }
}

// for operator<<
int bigint::findSize()
{
    int size = CAPACITY;
    while (bigintArray[size - 1] == 0)
        --size;
    return size;
}

std::ostream &operator<<(std::ostream &out, bigint rhs)
{
    int size = rhs.findSize();
    int ncap = size - 80;
    if (size <= 0)
        out << "0" << std::endl;

    if (size > 80)
    {
        for (int i = size - 1; i > ncap; --i)
            out << rhs.bigintArray[i];
        out << std::endl;
        for (int i = ncap; i >= 0; --i)
            out << rhs.bigintArray[i];
        out << std::endl;
    }

    else
    {
        for (int i = size - 1; i >= 0; --i)
            out << rhs.bigintArray[i];
        out << std::endl;
    }

    return out;
}

bool bigint::operator==(bigint a)
{

    for (int i = 0; i < CAPACITY; ++i)
        if (bigintArray[i] != a.bigintArray[i])
            return false;

    return true;
}

void bigint::debugPrint(std::ostream &out) const
{
    for (int i = CAPACITY - 1; i >= 0; --i)
        out << bigintArray[i] << "|";
    out << std::endl;
}

std::istream &operator>>(std::istream &in, bigint &rhs)
{
    char number = '*', character[CAPACITY];
    int i = 0;
    in >> number;
    while (number != ';')
    {
        character[i] = number;
        ++i;
        in >> number;
    }
    int charnumber, newCap = i;
    for (int j = 0; j < newCap; ++j)
    {
        charnumber = character[i - 1] - int('0');
        rhs.bigintArray[j] = charnumber;
        --i;
    }
    return in;
}

int bigint::operator[](int inside) const
{
    return bigintArray[inside];
}

int& bigint::operator[](int inside)
{
    return bigintArray[inside];
}

bigint bigint::operator+(const bigint &rhs) const
{
    int result, i = 0, carry = 0;
    bigint newresult;
    while (i != CAPACITY - 1)
    {
        result = bigintArray[i] + rhs.bigintArray[i] + carry;
        carry = result / 10;
        newresult.bigintArray[i] = result % 10;
        ++i;
    }
    return newresult;
}

bigint bigint::timesDigit(int rhs)const{
    int result, i = 0, carry = 0;
    bigint newresult;
    while (i != CAPACITY - 1)
    {
        result = bigintArray[i] * rhs + carry;
        carry = result / 10;
        newresult.bigintArray[i] = result % 10;
        ++i;
    }
    return newresult;
}

bigint bigint::times10(int rhs) const{
    bigint newresult;
    int i = 0;
    while(i < CAPACITY - rhs)
    {
        newresult.bigintArray[i+rhs] = bigintArray[i];
        ++i;
    }
    return newresult;
}

bigint bigint::operator*(const bigint &rhs)const{
    bigint tmp, product;
    for(int i=0;i<CAPACITY-1; ++i){
        tmp = rhs.timesDigit(bigintArray[i]);
        product = product + tmp.times10(i);
    }
    return product;
}



