//
// File:        logentry.hpp
//
// Version:     1.0
// Date:
// Author:
//
// Description: Class definition for a log entry.
//
//
//

#ifndef CS_LOGENTRY_H_
#define CS_LOGENTRY_H_

#include "string.hpp"
#include <iostream>
#include <vector>

class Date {
public:
            Date() : day(String()) , month(String()), year(0) {};
            void setDate(String day_, String month_, int year_);
            String getDay() const { return day;};
            String getMonth() const { return month;};
            int getYear() const { return year;};
private:
    String  day, month;
    int year;
};


class Time {
  public:
            Time() : hour(0), minute(0), second(0) {};
            void setTime(int hour_, int minute_, int second_);
            int getHour() const { return hour;};
            int getMinute() const { return minute;};
            int getSec() const {return second;};
  private:
    int     hour, minute, second;
};



class LogEntry {
public:
            LogEntry() : host(String()), date(Date()), time(Time()), request(String()), status(String()), number_of_bytes(0) {};
            LogEntry(String);
            String gethost() const{return host;};
            int getByte() const{return number_of_bytes;};
    friend  std::ostream& operator<<(std::ostream&, const LogEntry&);

private:
    String  host;
    Date    date;
    Time    time;
    String  request;
    String  status;
    int     number_of_bytes;
};


//
// Free functions
//

std::vector<LogEntry>   parse       (std::istream&);
void                    output_all  (std::ostream&, const std::vector<LogEntry> &);
void                    by_host     (std::ostream&, const std::vector<LogEntry> &);
int                     byte_count  (const std::vector<LogEntry>&);
int                     findnum     (const String&);

#endif

