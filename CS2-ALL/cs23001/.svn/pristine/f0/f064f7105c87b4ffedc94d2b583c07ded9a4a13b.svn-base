// implementation file
// Ean Dodge
#include <iostream>
#include "bigint.hpp"

// char constructor
bigint::bigint(const char character[]) : bigint()
{

    int i = 0;

    while (character[i] != '\0')
        ++i;
    int a = i;
    int number;
    for (int j = 0; j < a; ++j)
    {
        number = int(character[i - 1]) - int('0');
        num[j] = number;
        --i;
    }
}

// int constrctor
bigint::bigint(int input)
{
    for (int i = 0; i < CAPACITY; ++i)
        num[i] = 0;
    int digit, i = 0;
    if (input == 0)
        num[i] = 0;
    else
    {
        while (input != 0)
        {
            digit = input % 10; // make digit the 1's place;
            num[i] = digit;
            input = input / 10;
            ++i;
        }
    }
}

std::ostream &operator<<(std::ostream &out, bigint rhs)
{
    int j = CAPACITY;
    while (rhs.num[j - 1] == 0)
        --j;
    int ncap = j - 80;
    if (j <= 0)
        out << "0" << std::endl;

    if (j > 80)
    {
        for (int i = j - 1; i > ncap; --i)
            out << rhs.num[i];
        out << std::endl;
        for (int i = ncap; i >= 0; --i)
            out << rhs.num[i];
        out << std::endl;
    }
    else
    {
        for (int i = j - 1; i >= 0; --i)
            out << rhs.num[i];
        out << std::endl;
    }

    return out;
}

bool bigint::operator==(bigint a)
{
    int j = CAPACITY;
    while (num[j] == 0)
        --j;
    for (int i = 0; i < j; ++i)
        if (num[i] != a.num[i])
            return false;

    return true;
}
void bigint::debugPrint(std::ostream &out) const
{
    for (int i = CAPACITY - 1; i >= 0; --i)
        out << num[i] << "|";
    out << std::endl;
}
