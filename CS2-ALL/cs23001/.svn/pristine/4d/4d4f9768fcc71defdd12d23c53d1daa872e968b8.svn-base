//
// File: stack.hpp
//
// Programmer:
// Date:       Spring 2023
//
//
// Do not change the names of the classes or methods.  Otherwise, instructor
//  tests will not work.
//
#ifndef CS2_STACK_HPP_
#define CS2_STACK_HPP_

#include <new>
#include <cassert>
#include <new>
#include "../string/string.hpp"


template<typename T> 
class Node {
public:
    node() : next(0) {};
    node(const T& item) : data(item), next(0) {};
    T data;   // the data (element)
    node<T>* next; //pointer to a node
};


// CLASS INV:
//
template <typename T>
class stack {
public:
              stack     () : tos(0) {};
              stack     (const stack<T>&);
              ~stack    ();
    void      swap      (stack<T>&);
    stack<T>& operator= (stack<T>) { swap(rhs); return *this;};   
	
	bool      empty     () const { return tos == 0;};
	bool      full      () const;
	T         top       () const { assert(!isEmpty()); return tos ->data; };
	T         pop       ();
	void      push      (const T&);

private:
	Node<T>   *tos;
};

//push
// requires: tos-> x1 -> x2 -> ...xn->0
// ensures: tos-> item -> x1 -> x2 -> ...xn->0
template <typename T>
void stack<T>::push(const T& item){
    assert(!isFull());
    node<T> *temp = new node<T>(item);
    temp ->next = tos;
    tos = temp;
}
//pop
//requires: tos != 0 || tos -> x1 -> x2 -> ... xn->0
//ensures: tos-> x2 -> ... xn->0
template<typename T>
T stack<T>::pop(){
    assert(!isEmpty());
    T result = tos->data;
    node<T> *temp = tos;
    tos = tos->next;
    delete temp;
    return result;
}
//
template <typename T>
stack<T>::~stack(){
    node<T> *temp = 0;
    while(tos != 0){
        temp = tos;
        tos = tos->next;
        delete temp;
    }
}

template <typename T>
stack<T>::stack(const stack<T> &actual) : stack<T>() {
    node<T> *temp = actual.tos;
    node<T> *bottom;
    while (temp != 0){
        if (tos == 0){
            tos = new node<T>(temp -> data);
            bottom = tos;
        }else{
            bottom->next = new node<T>(temp->data);
            bottom = bottom->next;
        }
        temp = temp->next;
    }
}
template <typename T>
void stack<T>::swap(stack<T> &rhs){
    node<T> *temp = tos;
    tos = rhs.tos;
    rhs.tos = temp;
}


template <typename T>
bool stack<T>::full() const {
    node<T> *temp = new(std::nothrow) node<T>();
    if (temp == 0) return true; //out of memory
    delete temp;
    return false;
}



#endif
