STRINg adt
-use a char array of some fixed size
-use a global const int for the size. This way it can be easilt changed - remeber, no magic numbers
-need to be able to detirmine the end of the string - search for the end of the string
-null termination char array: 0 =='\0' != '0'

STRIngn operators
-creat strings - various constructors
-get the length and the capacity of a string
-concatenate two strings together: s=s+"abc";
-access/modify a charcter: std::cout<< s[2]; s[2]='x';
relational operators ==,<,>etc
)/I operators
get a substring: s.substr(2,3)
find a specfic string

RULES OF USAGE
construction of strings must be done vis the operations
-can not access past the null terminator str[0,...,length()-1]
free functions -

const int STRING_SIZE = 256;


class String {
public:
    String();
    String(char);
    String(const char[]);

    int     capacity() const { return STRING_SIZE -1; };
    int     length() const;
    char    operator[](int) const;
    char&   operator[](int);
    String  operator+ (const String&) const;
    String& operator+=(const String&);
    String  substr  (int,int) const;
    int     findchar(int,char) const;
    bool    operator==(const String&) const;
    bool    operator< (const String&) const;
    friend std::ostream& operator<<(std::ostream&, const String&);


private:
    char    str[STRING_SIZE];
};

std::istream& operator>>(std::istream&, String&);

String operator+(char, const String&); //v1
String operator+(const char[], const string&);//v1

String operator+(String, const String&); //v2

bool operator==(char,          const String&);
bool operator==(const char[],  const String&);
bool operator< (char,          const String&);
bool operator< (char,          const String&);
bool operator!=(const String&, const String&);
bool operator> (const String&, const String&);
bool operator<=(const String&, const String&);
bool operator>=(const String&, const String&);


//implementation
#include "string.hpp"

String::String(){
    str[0] = 0;
}

String::String(char ch) {
    str[0] = ch;
    str[1] = 0;
}

String::String(const char s[])
    int i = 0;
    while (s[i] != 0) {
        str[i] = s[i];
        ++i;
    }
    str[i] = 0;
}

int String::length() const {
    int result = 0;
    while (str[result] != 0) ++result;
    return result;
}

//Requires: 0 <= i < length()
char  String::operator[](int i) const {
//want to do cout<<b[0]
    assert(i>= 0);
    assert(i < length());//calls it on "this"//a keyword that is a pointer to the object the method was called upon
    return str[i];
}
//char & you return a pointer to where you return too
char& String::operator[](int i) {//you can modify this since there is no const
//want to do b[0] = 'x'
    assert(i >= 0);
    assert(i < length());
    return str[i];
}

String string::operator+(const String& rhs) const {
    String result(str);
    int offset = length(); //could be result.length()
    int i = 0;
    while (rhs.str[i] != 0) {
        if(offset+i > capacity()) break;
        result.str[offset + i] = rhs.str[i];
        ++i;
    }
    result.str[offset +i] = 0;
    return result;
}//test cases:
//"abc"+"abc"
//"abc" + ""
//"bvo3rbcorc3ocb3ojbf" + "got"

//
String& String::operator+=(const String& rhs){
    int offset = length();
    int rhsLen = rhs.length();
    int i= 0;
    while(i < rhsLen) {
        if(offset+i >= capacity()) break;
        str[offset + i] = rhs.str[i[;
        ++i;
    }
    str[offset + i] = 0;

   return *this;
}

String operator+(String lhs, const String &rhs){
    return lhs += rhs;
}

bool String::operator ==(const String& rhs) const{
    int i = 0;
    while(str[i] != 0; && (rhs.str[i] != 0) &&
         (str[i] == rhs.str[i]) ) ++i;
    return str[i] == rhs.str[i]; //loops till difference, if different, this case will be false, if true, this has to be true
}

bool operator ==(char lhs, const String& rhs){
    return String(lhs) == rhs;
}
bool operator==(const char[] lhs, const String& rhs) {
    return String(lhs) == rhs;
}

bool String::operator<(const String& rhs) const {
    int i=0;
    while((str[i] != 0) && (rhs.str[i] != 0) && (str[i] == rhs.str[i])) {
        ++i;
    }
    return str[i] < rhs.str[i];
}
bool operator!=(const String& lhs,const String& rhs){
    return !(lhs == rhs);
}
bool operator>(const String& lhs,const String& rhs){
    return rhs < lhs;
}

bool operator <=(const String& lhs, const String & rhs) {
    return !(lhs > rhs);
}
bool operator<(char lhs, const String& rhs){
    return String(lhs)<rhs;
}
bool operator<(const char[] lhs, const String& rhs){
    return String(lhs) < rhs;
}
bool operator>=(const String& lhs, const String& rhs){
    return !(rhs < lhs);
}

//REQUIERS: 0 <= start <= end < length()
//ENSURES: retVal == str[start,...,end]
String String::substr(int start, int end) const {
    String result;
    if (start < 0) start = 0;
    if (end < start) return String();
    if (end >= length()) end = length() -1;

    for(int i= start; i<=end; ++i){
        result += str[i];
    }
    return result;
}

//Requiers: 0 <= start < length()'
//Ensures: retVal == i : str[i] == ch; || -1 if no ch in str
int String::findchar(int start=0, char ch) const {
    if(start<0) start = 0;
    if (start >= length()) return -1;
    int i= start;
    while((str[i] != 0) && (str[i] != ch)) ++i;
    if(str[i] == ch)
        return i;
    else
        return -1;
}
