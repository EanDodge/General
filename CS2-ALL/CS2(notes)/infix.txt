goes with Stacks code


String infix_to_postfix(const char expr[]){
    stack<String> S;
    char token;
    int i=0;
    String lhs, op, rhs;
    while (expr[i] != 0){
        token = expr[i];
        if (token == ')') {
            rhs = S.pop();
            op = S.pop();
            lhs = S.pop();
            S.push(lhs + rhs + op);
        }else if(token != '('){
            String temp = " ";
            temp[0] = expr[i];
            S.push(temp);
        }
        ++i;
    }
    return S.pop();
}
String infix_to_prefix(const char expr[]){
    stack<String> S;
    char token;
    int i=0;
    while (expr[i] != 0){
        token = expr[i];
        if (token == ')'){
            rhs = S.pop();
            op = S.pop();
            lhs = S.pop();
            S.push(op + lhs + rhs);
        }else if(token != '('){
            String temp = " ";
            temp[0] = expr[i];
            S.push(temp);
        }
        ++i;
    }
    return S.pop();
}

//

bool isOperand(char ch){
    return ('0' <= ch)&&(ch <= '9');
}

int eval(int lhs, char op, int rhs){
    switch (op){
        case '+': return lhs + rhs;
        case '-': return lhs - rhs;
        case '*': return lhs*rhs;
        case '/': return lhs/rhs;
    }
}
int charTOInt(char ch){
    return int(ch) - int('0');
}

int EvalPostfix(const char expr[]){
    stack<int> S;
    int i = 0;
    while(expr[i] != 0){
        if(isOperand(expr[i])){
            S.push(charToInt(expr[i]));
        }else {//must be operator
            int rhs, lhs;
            rhs = S.pop();
            lhs = S.pop();
            S.push(eval(lhs, expr[i], rhs));
        }
        ++i;
    }
    return S.pop();
}




int main(){
    std::cout<<"|"<<"((4+6)*(4+7))"<<"|"<<std::endl;
    infix_to_postfix("((4+6)*(4+7))") // will print 46+47+*
    intfix_toprefix("((4+6)*(4+7))") // will print *+46+47
}

