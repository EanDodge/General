remove from the beiginning 
temp = beginning;
beginning

operating system manages the heap

template<typename T>
class node{
public:
    node() : next(0) {};
    node(const T& item) : data(item), next(0) {};
    T data;   // the data (element)
    node<T>* next; //pointer to a node
// ptr ->next = new node(6); does the same thing as (*ptr).next = new node(6);
}

template <typename T>
class queue {
public:
              queue () : beginning(0), ending(0){};
              ~queue();
              queue(    const queue<T>&);
    void      swap(     queue<T>&);
    queue<T>& operator=(queue<T> rhs){ swap(rhs); return *this;};
    void      enqueue(  const T&);
    T         dequeue();
    T         front  () const {assert(!isEmpty); return beginning->data;};
    bool      isEmpty() const {                  return beginning == 0; };
    bool      isFull () const;
private:
    node<T> *beginning,
            *ending;
};

//enqueue
//requires : beginning is x1 and ending is not isFull
template <typename T>
void queue<T>::enqueue(const T &item){
    assert(!isFull());
    if(ending == 0){
        beginnning = new node<T>(item);
        ending = beginning;
    }else{
        endning->next = new node<T>(item);
        endning = endning->next;
        }
}

//dequeue
//requires: beginning -> x1 -> x2 -> ... -> xn <- ending
//ENSURES : beginning -> x2 -> ... -> xn <- endning && RETVAL == x1
template <typename T>
T queue<T>::dequeue(){
    assert(!isEmpty());
    T result = beginning ->data;
    node<T> *temp = beginning;
    beginning = beginning ->next;
    if(beginning == 0) ending = 0;
    delete temp;
    return result;
}

//destructor(beginning instead of tos)
//copy ctor(slightly simpler since we have beginning and end)

template <typename T>
queue<T>::~queue(){
    node<T> *temp;
    while(beginning != 0){
        temp = beginning; 
        beginning = beginning->next;
        delete temp;
        //set temp to beginning, inrement beginning, delete temp, stop when beginning = 0
    }
}

template <typename T>
queue<T>::queue(const queue<T> &actual) : queue(){
    node<T> *temp = actual.beginning;
    while (temp != 0) {
        if(beginning = 0){
            beginning = new node<T>(temp -> data)
            endning = beginning;
        }else {
            ending->next = new node<T>(temp-> data)'
            ending = ending->;
        }
        temp = temp->next;
    }
}

template <typename T>
void queue<T>::swap(queue<T> &rhs){
    node<T> *temp = beginning;
    beginning = rhs.beginning;
    rhs.beginning = temp;

    temp = ending;
    ending = rhs.ending;
    rhs.ending = temp;
}

template <typename T>
bool queue<T>::isFull() const {return false;} // same as last


#endif
