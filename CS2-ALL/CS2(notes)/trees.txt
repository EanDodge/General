TREES

A special form of a graph
has nodes and edges
a tree is a subset of graph- undirected graph with no simple circuts
a rooted tree in which one vertex has been desinated as the root and every edge is directed away from the root 
----****a rooted tree is called an N-ary tree if every internal vertex has no more than n children. tree is alled full n-ary otherwise
                         root
                    A            b //siblings(both children of root)
                   c  D            E //grandchildren
                 f  G            H  g
                J k   L

-It matters about the order of insertion(linear seach)
-start with root, next number-greater or less than? less goes left, greater goes right, repeat till place to insert 

Tree traversals
travserse the tree(search) a list either forward or backwards
there is a number of ways to do so
starting from the root go left or right
can visit (sccess the data) at the first pass or when returing
three main
-inorder
-preorder
-postorder

inorder{
    if(ptr)
    inorder(ptr->left)
    visit(ptr->data)
    inorder(ptr-> right)
}
preorder{
    visit(ptr->data)
    preorder(ptr->left)
    preorder(ptr->right)
}
postorder{
    postorder(ptr->left)
    postorder(ptr->right)
    visit(ptr->data)
}

template <typename T>
class bnode {
public:
    bnode() :left(0), right(0) {};
    bnode(const T& x) : data(x), left(0), right(0){};

};


template <typename T>
class btree {
public:
    btree() :              empty(true),               left(0), right(0){};
    btree(const T& item) : data (item), empty(false), left(0), right(0) {};
    ~btree()
    btree(const btree<T>&);
    void      swap(btree<T>&);
    btree<t>& operator=(btree<T> rhs) {swap(rhs); return *this;};
    bool      isEmpty() const {return empty;};
    bool      isFull() const;
    bool      bfind(const T&) const;
    void      binsert(const T&);
    void      preorder(std::ostream&)const;
    void      postorder(std::ostream&)const;
    void      inorder(std::ostream&)const;

private:
    T        data;
    bool     empty;
    btree<T> *left, *right;
};

template<typename T>
bool btree<T>::bfind(const T& key) const {
    if(empty) return false;
    if(key == data) return true;
    if(key < data){
        if(left) return left->bfind(key);
        else return false;
    }else{
        if(right) return right->bfind(key);
        else return false;
    }
}

template <typename T>
void btree<T>::binsert(const T& item){
    if (empty){
        data = item;
        empty = false;
    }else{
        if(item == data) return;
        if(item < data){
            if(left){
                left->binsert(item);
            }else{
                left = new btree<T>(item);
            }
        }else{
            if (right){
                right->binsert(item);
            }else{
                right = new btree<T>(item);
            }
        }
    }
}

template <typename T>
void btree<T>::inorder(std::ostream& out) const {
    if(left) left->inorder(out);
    out<<data<<" ";
    if ( right) right->inorder(out);
}
template <typename T>
void btree<T>::preorder(std::ostream& out) const {
    out<<data<<" ";
    if(left) left->preorder(out);
    if ( right) right->preorder(out);
}
template <typename T>
void btree<T>::postorder(std::ostream& out) const {
    if(left) left->postorder(out);
    if ( right) right->postorder(out);
    out<<data<<" ";   
}

template <typename T>
btree<T> ::btree(const btree<T>& actual) : btree<T>() {
    data = actual.data;
    empty = actual.empty;
    if (actual.left){
        left = new btree<T>(*(actual.left));
    }
    if(actual.right){
        right = new btree<T>(*(actual.right));
    }
}

template <typename T>
btree<T>::~btree() {
    if(left)
        delete left;
    if (right) 
        delete right;
    //compiler deallocates object
}

template <typename T>
void btree<T>::swap(btree<T>& rhs){
    bool tempty = rhs.empty;
    rhs.empty = empty;
    empty = tempty;

    btree<T> *temp = rhs.left;
    rhs.left = left;
    left = temp;
    
    temp = rhs.right;
    rhs.right = right;
    right = temp;
    
    T tdata = rhs.data;
    rhs.data = data;
    data = tdata;
}

//deleting a node; 
//find the predecesor(left child);
//then find left most with right child
