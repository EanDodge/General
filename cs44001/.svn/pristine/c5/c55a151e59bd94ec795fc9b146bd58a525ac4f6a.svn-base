//Ean Dodge
//header file based off of Dr. Nesterenko's header

#ifndef WordListM
#define WordListM

#include <iostream>
#include <string>
#include <fstream>

using std::cout;
using std::endl;
using std::string;
using std::ifstream;

class WordOccurrence {
public:
    WordOccurrence(const string& word = "", const int num = 0): word_(word), num_ (num) {};
    bool matchWord(const string &str){return (word_ == str);}; // returns true if word matches stored
    void increment() {++num_;}; // increments number of occurrences
    string getWord() const {return word_;};
    int getNum() const {return num_;};

private:
    string word_;
    int num_;
};

class WordList{
public:
    // add copy constructor, destructor, overloaded assignment
    WordList(int num = 0) {size_ = num; wordArray_ = new WordOccurrence[size_];};
    ~WordList() {delete [] wordArray_;};
    WordList(const WordList&);
    WordList& operator=(const WordList&);

    // implement comparison as friend
    friend bool equal(const WordList&, const WordList&);

    void addWord(const string &);
    void print();

    // Only use for testing purposes
    WordOccurrence * getWords() const {return wordArray_;};
    int getSize() const {return size_;};
private:
    WordOccurrence *wordArray_; // a dynamically allocated array of WordOccurrences
                                // may or may not be sorted
    int size_;
};

#endif